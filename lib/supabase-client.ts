import { createClient } from "@supabase/supabase-js"
import type { Database } from "@/types/supabase"

// CrÃ©er un singleton pour le client Supabase cÃ´tÃ© client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || ""
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ""

console.log("ğŸ”„ Initializing Supabase client", {
  hasUrl: !!supabaseUrl,
  hasKey: !!supabaseAnonKey,
  url: supabaseUrl.substring(0, 10) + "...", // Ne pas afficher l'URL complÃ¨te pour des raisons de sÃ©curitÃ©
})

// Configuration de la persistance de session
const supabaseOptions = {
  auth: {
    persistSession: true, // Activer la persistance de session (par dÃ©faut)
    storageKey: "lumiron-auth-token", // ClÃ© personnalisÃ©e pour le stockage
    autoRefreshToken: true, // RafraÃ®chir automatiquement le token
    detectSessionInUrl: true, // DÃ©tecter la session dans l'URL (pour les redirections aprÃ¨s auth)
  },
}

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, supabaseOptions)

// Fonction pour obtenir une nouvelle instance du client
// Utile pour les composants qui ont besoin d'une nouvelle instance
export const getSupabaseClient = () => {
  console.log("ğŸ”„ Creating new Supabase client instance")
  return createClient<Database>(supabaseUrl, supabaseAnonKey, supabaseOptions)
}

// Cette fonction est utilisÃ©e pour obtenir un client authentifiÃ©
// pour les appels aux services nÃ©cessitant une authentification
export const getAuthenticatedClient = async () => {
  // RÃ©utiliser l'instance existante car elle maintient dÃ©jÃ  la session
  return supabase
}
